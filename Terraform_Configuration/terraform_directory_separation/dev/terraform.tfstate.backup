{
  "version": 4,
  "terraform_version": "1.3.2",
  "serial": 7,
  "lineage": "490f644d-bfda-ea51-4f3d-1069811525ab",
  "outputs": {
    "dev_website_endpoint": {
      "value": "http://dev-curiously-rested-hedgehog.s3-website-us-west-2.amazonaws.com/index.html",
      "type": "string"
    }
  },
  "resources": [
    {
      "mode": "managed",
      "type": "aws_s3_bucket",
      "name": "dev",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "acceleration_status": "",
            "acl": "private",
            "arn": "arn:aws:s3:::dev-curiously-rested-hedgehog",
            "bucket": "dev-curiously-rested-hedgehog",
            "bucket_domain_name": "dev-curiously-rested-hedgehog.s3.amazonaws.com",
            "bucket_prefix": null,
            "bucket_regional_domain_name": "dev-curiously-rested-hedgehog.s3.us-west-2.amazonaws.com",
            "cors_rule": [],
            "force_destroy": true,
            "grant": [],
            "hosted_zone_id": "Z3BJ6K6RIION7M",
            "id": "dev-curiously-rested-hedgehog",
            "lifecycle_rule": [],
            "logging": [],
            "object_lock_configuration": [],
            "policy": "",
            "region": "us-west-2",
            "replication_configuration": [],
            "request_payer": "BucketOwner",
            "server_side_encryption_configuration": [],
            "tags": null,
            "tags_all": {},
            "versioning": [
              {
                "enabled": false,
                "mfa_delete": false
              }
            ],
            "website": [],
            "website_domain": null,
            "website_endpoint": null
          },
          "sensitive_attributes": [],
          "private": "bnVsbA==",
          "dependencies": [
            "random_pet.petname"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "aws_s3_bucket_acl",
      "name": "dev",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "access_control_policy": [
              {
                "grant": [
                  {
                    "grantee": [
                      {
                        "display_name": "",
                        "email_address": "",
                        "id": "",
                        "type": "Group",
                        "uri": "http://acs.amazonaws.com/groups/global/AllUsers"
                      }
                    ],
                    "permission": "READ"
                  },
                  {
                    "grantee": [
                      {
                        "display_name": "epmgrpcontributor",
                        "email_address": "",
                        "id": "6d3289cdf7004c42cb851d416b31c3e0c94a367c33ac360b57c64e0a2128efef",
                        "type": "CanonicalUser",
                        "uri": ""
                      }
                    ],
                    "permission": "FULL_CONTROL"
                  }
                ],
                "owner": [
                  {
                    "display_name": "epmgrpcontributor",
                    "id": "6d3289cdf7004c42cb851d416b31c3e0c94a367c33ac360b57c64e0a2128efef"
                  }
                ]
              }
            ],
            "acl": "public-read",
            "bucket": "dev-curiously-rested-hedgehog",
            "expected_bucket_owner": "",
            "id": "dev-curiously-rested-hedgehog,public-read"
          },
          "sensitive_attributes": [],
          "private": "bnVsbA==",
          "dependencies": [
            "aws_s3_bucket.dev",
            "random_pet.petname"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "aws_s3_bucket_policy",
      "name": "dev",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "bucket": "dev-curiously-rested-hedgehog",
            "id": "dev-curiously-rested-hedgehog",
            "policy": "{\r\n    \"Version\": \"2012-10-17\",\r\n    \"Statement\": [\r\n        {\r\n            \"Sid\": \"PublicReadGetObject\",\r\n            \"Effect\": \"Allow\",\r\n            \"Principal\": \"*\",\r\n            \"Action\": [\r\n                \"s3:GetObject\"\r\n            ],\r\n            \"Resource\": [\r\n                \"arn:aws:s3:::dev-curiously-rested-hedgehog/*\"\r\n            ]\r\n        }\r\n    ]\r\n}\r\n"
          },
          "sensitive_attributes": [],
          "private": "bnVsbA==",
          "dependencies": [
            "aws_s3_bucket.dev",
            "random_pet.petname"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "aws_s3_bucket_website_configuration",
      "name": "dev",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "bucket": "dev-curiously-rested-hedgehog",
            "error_document": [
              {
                "key": "error.html"
              }
            ],
            "expected_bucket_owner": "",
            "id": "dev-curiously-rested-hedgehog",
            "index_document": [
              {
                "suffix": "index.html"
              }
            ],
            "redirect_all_requests_to": [],
            "routing_rule": [],
            "website_domain": "s3-website-us-west-2.amazonaws.com",
            "website_endpoint": "dev-curiously-rested-hedgehog.s3-website-us-west-2.amazonaws.com"
          },
          "sensitive_attributes": [],
          "private": "bnVsbA==",
          "dependencies": [
            "aws_s3_bucket.dev",
            "random_pet.petname"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "aws_s3_object",
      "name": "dev",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "acl": "public-read",
            "bucket": "dev-curiously-rested-hedgehog",
            "bucket_key_enabled": false,
            "cache_control": "",
            "content": "\u003c!DOCTYPE html\u003e\r\n\u003chtml\u003e\r\n  \u003chead\u003e\r\n    \u003ctitle\u003eTerramino\u003c/title\u003e\r\n    \u003cstyle\u003e\r\n      html,\r\n      body {\r\n        height: 100%;\r\n        margin: 0;\r\n      }\r\n\r\n      body {\r\n\r\n        background-image: url(\"https://raw.githubusercontent.com/hashicorp/learn-terraform-circleci/master/assets/background.png\");\r\n        display: flex;\r\n        align-items: center;\r\n        justify-content: center;\r\n      }\r\n\r\n      canvas {\r\n        border: 1px solid white;\r\n      }\r\n    \u003c/style\u003e\r\n  \u003c/head\u003e\r\n\r\n  \u003cbody\u003e\r\n    \u003ccanvas width=\"320\" height=\"640\" id=\"game\"\u003e\u003c/canvas\u003e\r\n    \u003cscript\u003e\r\n      // https://tetris.fandom.com/wiki/Tetris_Guideline\r\n\r\n      // get a random integer between the range of [min,max]\r\n      // @see https://stackoverflow.com/a/1527820/2124254\r\n      function getRandomInt(min, max) {\r\n        min = Math.ceil(min);\r\n        max = Math.floor(max);\r\n\r\n        return Math.floor(Math.random() * (max - min + 1)) + min;\r\n      }\r\n\r\n      // generate a new tetromino sequence\r\n      // @see https://tetris.fandom.com/wiki/Random_Generator\r\n      function generateSequence() {\r\n        const sequence = [\"I\", \"J\", \"L\", \"O\", \"S\", \"T\", \"Z\"];\r\n\r\n        while (sequence.length) {\r\n          const rand = getRandomInt(0, sequence.length - 1);\r\n          const name = sequence.splice(rand, 1)[0];\r\n          tetrominoSequence.push(name);\r\n        }\r\n      }\r\n\r\n      // get the next tetromino in the sequence\r\n      function getNextTetromino() {\r\n        if (tetrominoSequence.length === 0) {\r\n          generateSequence();\r\n        }\r\n\r\n        const name = tetrominoSequence.pop();\r\n        const matrix = tetrominos[name];\r\n\r\n        // I and O start centered, all others start in left-middle\r\n        const col = playfield[0].length / 2 - Math.ceil(matrix[0].length / 2);\r\n\r\n        // I starts on row 21 (-1), all others start on row 22 (-2)\r\n        const row = name === \"I\" ? -1 : -2;\r\n\r\n        return {\r\n          name: name, // name of the piece (L, O, etc.)\r\n          matrix: matrix, // the current rotation matrix\r\n          row: row, // current row (starts offscreen)\r\n          col: col // current col\r\n        };\r\n      }\r\n\r\n      // rotate an NxN matrix 90deg\r\n      // @see https://codereview.stackexchange.com/a/186834\r\n      function rotate(matrix) {\r\n        const N = matrix.length - 1;\r\n        const result = matrix.map((row, i) =\u003e\r\n          row.map((val, j) =\u003e matrix[N - j][i])\r\n        );\r\n\r\n        return result;\r\n      }\r\n\r\n      // check to see if the new matrix/row/col is valid\r\n      function isValidMove(matrix, cellRow, cellCol) {\r\n        for (let row = 0; row \u003c matrix.length; row++) {\r\n          for (let col = 0; col \u003c matrix[row].length; col++) {\r\n            if (\r\n              matrix[row][col] \u0026\u0026\r\n              // outside the game bounds\r\n              (cellCol + col \u003c 0 ||\r\n                cellCol + col \u003e= playfield[0].length ||\r\n                cellRow + row \u003e= playfield.length ||\r\n                // collides with another piece\r\n                playfield[cellRow + row][cellCol + col])\r\n            ) {\r\n              return false;\r\n            }\r\n          }\r\n        }\r\n\r\n        return true;\r\n      }\r\n\r\n      // place the tetromino on the playfield\r\n      function placeTetromino() {\r\n        for (let row = 0; row \u003c tetromino.matrix.length; row++) {\r\n          for (let col = 0; col \u003c tetromino.matrix[row].length; col++) {\r\n            if (tetromino.matrix[row][col]) {\r\n              // game over if piece has any part offscreen\r\n              if (tetromino.row + row \u003c 0) {\r\n                return showGameOver();\r\n              }\r\n\r\n              playfield[tetromino.row + row][tetromino.col + col] =\r\n                tetromino.name;\r\n            }\r\n          }\r\n        }\r\n\r\n        // check for line clears starting from the bottom and working our way up\r\n        for (let row = playfield.length - 1; row \u003e= 0; ) {\r\n          if (playfield[row].every(cell =\u003e !!cell)) {\r\n            // drop every row above this one\r\n            for (let r = row; r \u003e= 0; r--) {\r\n              playfield[r] = playfield[r - 1];\r\n            }\r\n          } else {\r\n            row--;\r\n          }\r\n        }\r\n\r\n        tetromino = getNextTetromino();\r\n      }\r\n\r\n      // show the game over screen\r\n      function showGameOver() {\r\n        cancelAnimationFrame(rAF);\r\n        gameOver = true;\r\n\r\n        context.fillStyle = \"black\";\r\n        context.globalAlpha = 0.75;\r\n        context.fillRect(0, canvas.height / 2 - 30, canvas.width, 60);\r\n\r\n        context.globalAlpha = 1;\r\n        context.fillStyle = \"white\";\r\n        context.font = \"36px monospace\";\r\n        context.textAlign = \"center\";\r\n        context.textBaseline = \"middle\";\r\n        context.fillText(\"GAME OVER!\", canvas.width / 2, canvas.height / 2);\r\n      }\r\n\r\n      const canvas = document.getElementById(\"game\");\r\n      const context = canvas.getContext(\"2d\");\r\n      const grid = 32;\r\n      const tetrominoSequence = [];\r\n\r\n      // keep track of what is in every cell of the game using a 2d array\r\n      // tetris playfield is 10x20, with a few rows offscreen\r\n      const playfield = [];\r\n\r\n      // populate the empty state\r\n      for (let row = -2; row \u003c 20; row++) {\r\n        playfield[row] = [];\r\n\r\n        for (let col = 0; col \u003c 10; col++) {\r\n          playfield[row][col] = 0;\r\n        }\r\n      }\r\n\r\n      // how to draw each tetromino\r\n      // @see https://tetris.fandom.com/wiki/SRS\r\n      const tetrominos = {\r\n        I: [[0, 0, 0, 0], [1, 1, 1, 1], [0, 0, 0, 0], [0, 0, 0, 0]],\r\n        J: [[1, 0, 0], [1, 1, 1], [0, 0, 0]],\r\n        L: [[0, 0, 1], [1, 1, 1], [0, 0, 0]],\r\n        O: [[1, 1], [1, 1]],\r\n        S: [[0, 1, 1], [1, 1, 0], [0, 0, 0]],\r\n        Z: [[1, 1, 0], [0, 1, 1], [0, 0, 0]],\r\n        T: [[0, 1, 0], [1, 1, 1], [0, 0, 0]]\r\n      };\r\n\r\n      // color of each tetromino\r\n      const colors = {\r\n        I: \"#623CE4\",\r\n        O: \"#7C8797\",\r\n        T: \"#00BC7F\",\r\n        S: \"#CA2171\",\r\n        Z: \"#1563ff\",\r\n        J: \"#00ACFF\",\r\n        L: \"white\"\r\n      };\r\n\r\n      let count = 0;\r\n      let tetromino = getNextTetromino();\r\n      let rAF = null; // keep track of the animation frame so we can cancel it\r\n      let gameOver = false;\r\n\r\n      // game loop\r\n      function loop() {\r\n        rAF = requestAnimationFrame(loop);\r\n        context.clearRect(0, 0, canvas.width, canvas.height);\r\n\r\n        // draw the playfield\r\n        for (let row = 0; row \u003c 20; row++) {\r\n          for (let col = 0; col \u003c 10; col++) {\r\n            if (playfield[row][col]) {\r\n              const name = playfield[row][col];\r\n              context.fillStyle = colors[name];\r\n\r\n              // drawing 1 px smaller than the grid creates a grid effect\r\n              context.fillRect(col * grid, row * grid, grid - 1, grid - 1);\r\n            }\r\n          }\r\n        }\r\n\r\n        // draw the active tetromino\r\n        if (tetromino) {\r\n          // tetromino falls every 35 frames\r\n          if (++count \u003e 35) {\r\n            tetromino.row++;\r\n            count = 0;\r\n\r\n            // place piece if it runs into anything\r\n            if (!isValidMove(tetromino.matrix, tetromino.row, tetromino.col)) {\r\n              tetromino.row--;\r\n              placeTetromino();\r\n            }\r\n          }\r\n\r\n          context.fillStyle = colors[tetromino.name];\r\n\r\n          for (let row = 0; row \u003c tetromino.matrix.length; row++) {\r\n            for (let col = 0; col \u003c tetromino.matrix[row].length; col++) {\r\n              if (tetromino.matrix[row][col]) {\r\n                // drawing 1 px smaller than the grid creates a grid effect\r\n                context.fillRect(\r\n                  (tetromino.col + col) * grid,\r\n                  (tetromino.row + row) * grid,\r\n                  grid - 1,\r\n                  grid - 1\r\n                );\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n\r\n      // listen to keyboard events to move the active tetromino\r\n      document.addEventListener(\"keydown\", function(e) {\r\n        if (gameOver) return;\r\n\r\n        // left and right arrow keys (move)\r\n        if (e.which === 37 || e.which === 39) {\r\n          const col = e.which === 37 ? tetromino.col - 1 : tetromino.col + 1;\r\n\r\n          if (isValidMove(tetromino.matrix, tetromino.row, col)) {\r\n            tetromino.col = col;\r\n          }\r\n        }\r\n\r\n        // up arrow key (rotate)\r\n        if (e.which === 38) {\r\n          const matrix = rotate(tetromino.matrix);\r\n          if (isValidMove(matrix, tetromino.row, tetromino.col)) {\r\n            tetromino.matrix = matrix;\r\n          }\r\n        }\r\n\r\n        // down arrow key (drop)\r\n        if (e.which === 40) {\r\n          const row = tetromino.row + 1;\r\n\r\n          if (!isValidMove(tetromino.matrix, row, tetromino.col)) {\r\n            tetromino.row = row - 1;\r\n\r\n            placeTetromino();\r\n            return;\r\n          }\r\n\r\n          tetromino.row = row;\r\n        }\r\n      });\r\n\r\n      // start the game\r\n      rAF = requestAnimationFrame(loop);\r\n    \u003c/script\u003e\r\n  \u003c/body\u003e\r\n\u003c/html\u003e\r\n",
            "content_base64": null,
            "content_disposition": "",
            "content_encoding": "",
            "content_language": "",
            "content_type": "text/html",
            "etag": "8ec790313163c1b9fc26913cd86a7f92",
            "force_destroy": false,
            "id": "index.html",
            "key": "index.html",
            "kms_key_id": null,
            "metadata": null,
            "object_lock_legal_hold_status": "",
            "object_lock_mode": "",
            "object_lock_retain_until_date": "",
            "server_side_encryption": "AES256",
            "source": null,
            "source_hash": null,
            "storage_class": "STANDARD",
            "tags": null,
            "tags_all": {},
            "version_id": "",
            "website_redirect": ""
          },
          "sensitive_attributes": [],
          "private": "bnVsbA==",
          "dependencies": [
            "aws_s3_bucket.dev",
            "random_pet.petname"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "random_pet",
      "name": "petname",
      "provider": "provider[\"registry.terraform.io/hashicorp/random\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "id": "curiously-rested-hedgehog",
            "keepers": null,
            "length": 3,
            "prefix": null,
            "separator": "-"
          },
          "sensitive_attributes": [],
          "private": "bnVsbA=="
        }
      ]
    }
  ],
  "check_results": []
}
